extern crate libc;
use libc::{c_int, pid_t};
use rcon::{AsyncStdStream, Connection};
use regex::Regex;
use serde_derive::Deserialize;
use std::{
    fs::File,
    io::{BufRead, BufReader},
    path::PathBuf,
    process::Command,
};
use sysinfo::{DiskExt, System, SystemExt};

extern "C" {
    pub fn waitpid(pid: pid_t, stat_loc: *mut c_int, options: c_int) -> pid_t;
}

#[derive(Deserialize, Debug, Clone)]
pub struct Session {
    pub name: String,
    pub description: String,
    pub host: String,
    pub game: Option<Game>,
    pub rcon: Option<Rcon>,
}

#[derive(Deserialize, Debug, Clone)]
pub struct Game {
    pub file_path: Option<String>,
    pub backup_interval: Option<usize>,
    pub backup_keep: Option<usize>,
    pub in_game_cmd: Option<bool>,
    pub lines: Option<usize>,
}

#[derive(Deserialize, Debug, Clone)]
pub struct Rcon {
    pub ip: Option<String>,
    pub port: u64,
    pub password: String,
}

#[derive(Deserialize)]
pub struct Config {
    pub ws_ip: String,
    pub ws_port: u64,
    pub backup_location: String,
    pub scripts_file: Option<Vec<String>>,
    pub restart_script: Option<String>,
    pub recompile_directory: Option<String>,
}

// std::Command can leave behind zombie processes that buid up over time, this small function uses
#[inline]
pub fn reap() {
    unsafe {
        waitpid(-1, std::ptr::null_mut(), 0x00000001);
    }
}

// function to handle mc commands send to a tmux session, this has a command "whitelist" to ensure
// that only certain commands are executed
async fn handle_command(server_name: String, cmd: String, arg: String) {
    let mut final_cmd = String::new();
    match cmd.as_str() {
        "s" => final_cmd = format!("scoreboard objectives setdisplay sidebar {}", arg),
        "score" => final_cmd = format!("scoreboard objectives setdisplay sidebar {}", arg),
        _ => return,
    }
    send_command(server_name.to_owned(), final_cmd).await;
}

// This removes all the formmating codes coming from MC chat with regex
#[inline(always)]
fn replace_formatting(mut msg: String) {
    msg = msg.replace("_", "\\_");
    // regex to replace any 'ยง' followed by digits with a blank space
    let mc_codes = Regex::new(r"ยง.*\d").unwrap();
    msg = mc_codes.replace_all(&msg, "").to_owned().to_string();
}

// function to check if the file or folder exist, if it does not exists emit a warning depending if
// the warning should be silenced or not
#[inline]
pub fn check_dir(dir: String) -> bool {
    let current_path = PathBuf::from(&dir);
    return current_path.exists();
}

// checks the number of lines in the log file to set them initially, this prevents old messages
// from being spat out if the bot restarts (and makes it a lot less annoying)
pub fn set_lines(server_name: String) -> usize {
    let file_path: String = format!("/tmp/{}-HypnosCore", &server_name);
    let file = File::open(&file_path).unwrap();
    let reader = BufReader::new(file);

    // count the amount of lines in the log file
    reader.lines().count()
}

// generate the tmux pipe connecting to the specified server, this also takes in the option to
// delete the file if it exists before generating it
// that can be used at startup or when just resetting the file in general
#[inline]
pub async fn gen_pipe(server_name: String, rm: bool) {
    if rm {
        // get the file path to the pipe file
        let pipe_old: String = format!("/tmp/{}-HypnosCore", &server_name);

        // remove the old pipe file if it exists
        if check_dir(pipe_old.to_owned()) {
            Command::new("rm")
                .arg(&pipe_old)
                .spawn()
                .expect("*error: failed to delete pipe file");
        }
    }

    // create the tmux command that will be entered to set the pipe
    let pipe_output = format!("cat >/tmp/{}-HypnosCore", &server_name);
    Command::new("tmux")
        .args(["pipe-pane", "-t", &server_name, &pipe_output])
        .spawn()
        .expect("*error: failed to generate pipe file");

    // call reap to remove any zombie processes generated by it
    reap();
}

// small function to send a command to the specific tmux session, this replaces new lines due to it
// causing a problem with commands
//
// this is one of the limitations of this system, but it's not that bad because if there are
// multiple lines you can send the command multiple times
#[inline(always)]
pub async fn send_command(server_name: String, message: String) {
    let msg = format!("{}", &message.replace(|c: char| !c.is_ascii(), ""));

    Command::new("tmux")
        .args(["send-keys", "-t", &server_name, &msg, "Enter"])
        .spawn()
        .expect("*error: failed to send to tmux session");

    reap();
}

// update messages from the log file, this takes in the log file, checks if the lines can be
// ignored, then checks if the new lines are in game commands, if they are then use handle command
// to check them and if not send them to discord
//
// unfortunately this is not very efficient but honestly I don't really care, this runs on separate
// threads from the mc server and if the log file gets above 2k lines it gets repiped with tmux to
// prevent the function from taing too long
pub async fn update_messages(server_name: String, lines: usize) -> (String, usize) {
    let file_path: String = format!("/tmp/{}-HypnosCore", &server_name);

    if !check_dir(file_path.to_owned()) {
        return ("".to_string(), 0);
    }

    // open the log file in bufreader
    let file = File::open(&file_path).unwrap();
    let reader = BufReader::new(file);
    let mut message = "".to_string();

    let mut cur_line: usize = lines;

    // Read the file line by line using the lines() iterator from std::io::BufRead.
    for (i, line) in reader.lines().enumerate() {
        // skip lines that are irrelevant
        if i > cur_line {
            // if they are new, update the counter
            cur_line = i;

            let line = line.unwrap();

            // if the line is too short then skip it
            if &line.chars().count() < &35 {
                continue;
            }

            // check if the message starts with certain characters
            let line_sep: &str = &line[33..];
            if !line.starts_with("[") || (!line_sep.starts_with("<") && !line_sep.starts_with("ยง"))
            {
                continue;
            }

            let newline = &line[33..];

            if newline.len() < 1 {
                continue;
            }

            // if it's not an in game command, we can generate what the discord message will be
            //
            // firstly we put the server name then the new line message, this is where replace
            // formatting comes in to remove the special mc escape sequences
            let nmessage = format!("[{}]{}\n", &server_name, newline.to_string());

            message.push_str(&nmessage);
        }
    }

    // if the lines are under 2k, we don't need to replace the file since it doesn't take much time
    // to process in the first place
    if lines < 2000 {
        return (message, cur_line);
    }

    // if it is above 2k however, we can reset the pipe and notify the to the console
    gen_pipe(server_name.to_owned(), true).await;
    println!("*info: pipe file reset -> {}", server_name);

    // return new line count to update the one in the main file
    ("".to_string(), 0)
}

/*
pub fn collect(server: String, lines: u16) -> String {
    let path: String = format!("/tmp/{}-HypnosCore", server);

    if !check_dir(path.to_owned()) {
        return "".to_string();
    }

    let (file, fline) = (File::open(&path).unwrap(), File::open(&path).unwrap());
    let (reader, flines) = (
        BufReader::new(file).lines(),
        BufReader::new(fline).lines().count(),
    );

    if lines as usize > flines {
        return "INVALID".to_string();
    }

    let mut result = String::new();

    for (i, line) in reader.enumerate() {
        if i >= flines - lines as usize {
            let new_content = format!("{}\n", line.expect("failed to parse line in collect"));
            result.push_str(&new_content);
        }
    }

    result
}*/

pub async fn create_rcon_connections(session: Vec<Session>) -> Vec<Connection<AsyncStdStream>> {
    let mut connections = Vec::new();
    for i in session {
        if i.rcon.is_none() || Some(i.rcon.to_owned().unwrap().port) != None {
            return connections;
        }

        let ip = match i.rcon.to_owned().unwrap().ip {
            Some(t) => t,
            None => "127.0.0.1".to_string(),
        };

        let credentials = format!("{}:{}", ip, i.rcon.to_owned().unwrap().port);

        let con = <Connection<AsyncStdStream>>::builder()
            .enable_minecraft_quirks(true)
            .connect(credentials, &i.rcon.to_owned().unwrap().password)
            .await
            .expect("*error: failed to connect to rcon session");

        connections.push(con);
    }
    connections
}

pub async fn send_rcon_message() {}

// TODO
// fix disk usage
//

pub async fn sys_check(dis: bool, chat_id: u64) {
    let (mut sys, mut warn) = (System::new_all(), false);
    sys.refresh_all();
    let mut response = String::new();

    // future, if first element < 100, it is the index of the disk that has problems
    let (u, t, i) = check_disk(&sys);

    // rustc is phasing out floats in match statements for obvious reasons, since we only need to check
    // for one value we can multiply this to get around it
    let x = (i * 100.0) as u16;
    if x != 10 {
        let drive = format!("drive low on space!:\nindex: {}\n", i);
        warn = true;
        response.push_str(&drive);
    }
    let drive = format!(
        "drive usage: {:.1} Mb /{:.1} Mb ({:.1}%)\n",
        u / 1048576.0,
        t / 1048576.0,
        (u / t) * 100.0
    );
    response.push_str(&drive);

    let ldavg = &sys.load_average().five;

    if ldavg > &0.0 {
        if ldavg > &(sys.physical_core_count().unwrap() as f64) {
            warn = true;
            response.push_str(&"high load average detected!\n");
        }
        // core count is only accurate if you have hyperthreading
        let avg = format!(
            "load average (5 minutes): {} -> {} logical cores\n",
            ldavg,
            sys.physical_core_count().unwrap() * 2
        );

        response.push_str(&avg);
    }

    if (sys.used_memory() as f64 / sys.total_memory() as f64) > 0.9 {
        response.push_str(&"high ram usage detected!\n");
        warn = true;
    }
    let ramu = format!(
        "ram usage: {} Mb / {} Mb ({:.2}%)\n",
        sys.used_memory() / 1045,
        sys.total_memory() / 1045,
        (sys.used_memory() as f64 / sys.total_memory() as f64) * 100.0
    );
    response.push_str(&ramu);

    let uptime = format!("server uptime: {} hrs\n", (sys.uptime() / 3600));

    response.push_str(&uptime);
}

// check the disk space avaible on the server, overfilling a drive is never a good thing and having
// this automatically be checked every few minutes is quite nice
//
// the function returns the index of the drive if there is one in trouble, this can help quickly sort
// things out through df -h if needed
pub fn check_disk(sys: &System) -> (f64, f64, f64) {
    let (mut used_biggest, mut used_total) = (0.0, 0.0);
    let (mut warn_i, mut cur_i) = (0, 0);
    let mut warn: bool = false;
    for disk in sys.disks() {
        // check if the disk space is over 10 gig total, if it is smaller it could be a ramfs or
        // temp partition that we can ignore
        if disk.total_space() < 10737418240 {
            continue;
        }

        let total_space = disk.total_space() as f64;

        if total_space > used_total {
            used_total = total_space;
            used_biggest = disk.available_space() as f64;
        }

        if ((used_total - used_biggest) / disk.total_space() as f64) > 0.9 {
            warn = true;
            warn_i = cur_i;
            println!("*warn: drive space low on drive index: {}", warn_i);
        }

        cur_i += 1;
    }
    if warn {
        return (used_total - used_biggest, used_total, warn_i as f64);
    } else {
        return (used_total - used_biggest, used_total, 0.1);
    }
}
