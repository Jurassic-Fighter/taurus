extern crate libc;
use libc::{c_int, pid_t};
use std::{
    path::PathBuf, 
    process::Command, 
    io::{BufRead, BufReader}, 
    fs::File,
};
use regex::Regex;

extern "C" {
    pub fn waitpid(pid: pid_t, stat_loc: *mut c_int, options: c_int) -> pid_t;
}

// std::Command can leave behind zombie processes that buid up over time, this small function uses
#[inline]
pub fn reap() {
    unsafe {
        waitpid(-1, std::ptr::null_mut(), 0x00000001);
    }
}

// function to handle mc commands send to a tmux session, this has a command "whitelist" to ensure
// that only certain commands are executed
async fn handle_command(server_name: String, cmd: String, arg: String) {
    let mut final_cmd = String::new();
    match cmd.as_str() {
        "s" => final_cmd = format!("scoreboard objectives setdisplay sidebar {}", arg),
        "score" => final_cmd = format!("scoreboard objectives setdisplay sidebar {}", arg),
        _ => return,
    }
    send_command(server_name.to_owned(), final_cmd).await;
}


// This removes all the formmating codes coming from MC chat with regex
#[inline(always)]
fn replace_formatting(mut msg: String) {
    msg = msg.replace("_", "\\_");
    // regex to replace any 'ยง' followed by digits with a blank space
    let mc_codes = Regex::new(r"ยง.*\d").unwrap();
    msg = mc_codes.replace_all(&msg, "").to_owned().to_string();
}

// function to check if the file or folder exist, if it does not exists emit a warning depending if
// the warning should be silenced or not
#[inline]
pub fn check_dir(dir: String) -> bool {
    let current_path = PathBuf::from(&dir);
    return current_path.exists();
}

// generate the tmux pipe connecting to the specified server, this also takes in the option to
// delete the file if it exists before generating it
// that can be used at startup or when just resetting the file in general
#[inline]
pub async fn gen_pipe(server_name: String, rm: bool) {
    if rm {
        // get the file path to the pipe file
        let pipe_old: String = format!(
            "/tmp/{}-HypnosCore", 
            &server_name
        );

        // remove the old pipe file if it exists
        if check_dir(pipe_old.to_owned()) {
            Command::new("rm")
                .arg(&pipe_old)
                .spawn()
                .expect("*error: failed to delete pipe file");
        }
    }

    // create the tmux command that will be entered to set the pipe
    let pipe_output = format!("cat >/tmp/{}-HypnosCore", &server_name);
    Command::new("tmux")
        .args(["pipe-pane", "-t", &server_name, &pipe_output])
        .spawn()
        .expect("*error: failed to generate pipe file");

    // call reap to remove any zombie processes generated by it
    reap();
}

// small function to send a command to the specific tmux session, this replaces new lines due to it
// causing a problem with commands
//
// this is one of the limitations of this system, but it's not that bad because if there are
// multiple lines you can send the command multiple times
#[inline(always)]
pub async fn send_command(server_name: String, message: String) {
    let msg = format!(
        "{}",
        &message
            .replace(|c: char| !c.is_ascii(), "")
    );

    Command::new("tmux")
        .args(["send-keys", "-t", &server_name, &msg, "Enter"])
        .spawn()
        .expect("*error: failed to send to tmux session");

    reap();
}


// update messages from the log file, this takes in the log file, checks if the lines can be
// ignored, then checks if the new lines are in game commands, if they are then use handle command
// to check them and if not send them to discord
//
// unfortunately this is not very efficient but honestly I don't really care, this runs on separate
// threads from the mc server and if the log file gets above 2k lines it gets repiped with tmux to
// prevent the function from taing too long
pub async fn update_messages(
    ign_prefix: String,
    server_name: String,
    lines: usize,
) -> (String, usize) {
    let file_path: String = format!("/tmp/{}-HypnosCore", &server_name);

    if !check_dir(file_path.to_owned()) {
        return ("".to_string(), 0);
    }

    // open the log file in bufreader
    let file = File::open(&file_path).unwrap();
    let reader = BufReader::new(file);
    let mut message = "".to_string();

    let mut cur_line: usize = lines;

    // Read the file line by line using the lines() iterator from std::io::BufRead.
    for (i, line) in reader.lines().enumerate() {
        // skip lines that are irrelevant
        if i > cur_line {
            // if they are new, update the counter
            cur_line = i;

            let line = line.expect("failed to unwrap message");

            // if the line is too short then skip it
            if &line.chars().count() < &35 {
                continue;
            }

            // check if the message starts with certain characters
            let line_sep: &str = &line[33..];
            if !line.starts_with("[") || (!line_sep.starts_with("<") && !line_sep.starts_with("ยง"))
            {
                continue;
            }

            // check if it's an in game command
            let ign_command: String = format!("ยงr> {}", ign_prefix);

            // if it is, then check if it's in the command "whitelist"
            if line_sep.contains(&ign_command) {
                let allowed_commands: Vec<String> = vec!["s".to_string(), "score".to_string()];

                // parse where the actual command starts, without the username
                let cmd_start: usize = line_sep.find(&ign_command).unwrap() + 5;

                if line_sep.len() < cmd_start {
                    return ("command not found".to_string(), cur_line);
                }

                // parse the actual command with argument
                let cmd: &str = &line_sep[cmd_start..];

                // parse where the just the command ends and where the argument is
                let cmd_split: Option<usize> = cmd.find(" ");

                if cmd_split.is_none() {
                    return ("".to_string(), cur_line);
                }

                // if it's in the whitelist send the command and argument separately to handle
                // command, there it will be transformed to the correct in game equivalent
                if allowed_commands.contains(
                    &cmd[1..cmd_split.expect("no command to split out of message")].to_owned(),
                ) {
                    handle_command(
                        server_name.to_owned(),
                        cmd[1..cmd_split.unwrap()].to_owned(),
                        cmd[(cmd_split.unwrap() + 1)..].to_owned(),
                    )
                    .await
                }

                // update the line count in the main file and continue
                return ("".to_string(), cur_line);
            }

            let newline = &line[33..];

            if newline.len() < 1 {
                continue;
            }

            // if it's not an in game command, we can generate what the discord message will be
            //
            // firstly we put the server name then the new line message, this is where replace
            // formatting comes in to remove the special mc escape sequences
            let nmessage = format!(
                "[{}]{}\n",
                &server_name,
                newline.to_string()
            );

            message.push_str(&nmessage);
        }
    }

    // if the lines are under 2k, we don't need to replace the file since it doesn't take much time
    // to process in the first place
    if lines < 2000 {
        return ("".to_string(), cur_line);
    }

    // if it is above 2k however, we can reset the pipe and notify the to the console
    gen_pipe(server_name.to_owned(), true).await;
    println!("*info: pipe file reset -> {}", server_name);

    // return new line count to update the one in the main file
    ("".to_string(), 0)
}

pub fn collect(server: String, lines: u16) -> String {
    let path: String = format!("/tmp/{}-HypnosCore", server);

    if !check_dir(path.to_owned()) {
        return "".to_string();
    }

    let (file, fline) = (File::open(&path).unwrap(), File::open(&path).unwrap());
    let (reader, flines) = (
        BufReader::new(file).lines(),
        BufReader::new(fline).lines().count(),
    );

    if lines as usize > flines {
        return "INVALID".to_string();
    }

    let mut result = String::new();

    for (i, line) in reader.enumerate() {
        if i >= flines - lines as usize {
            let new_content = format!("{}\n", line.expect("failed to parse line in collect"));
            result.push_str(&new_content);
        }
    }

    result
}

